@startuml base
!include gym.puml
remove gym.spaces
remove Wrapper
hide empty members

package sequoia as settings.base {
    ' namespace base.objects {
    together {
        together {
            abstract class Observations extends Batch {
                + x: Tensor
            }
            abstract class Actions extends Batch {
                + y_pred: Tensor
            }
            abstract class Rewards extends Batch {
                + y: Tensor
            }
        }
        
        Environment --* Observations: yields
        Environment --* Actions: receives
        Environment --* Rewards: returns

        interface Environment extends gym.Env, torch.DataLoader {
            + observation_space: Space<Observations>
            + action_space: Space<Actions>
            + reward_space: Space<Rewards>
            + step(Actions actions) -> Tuple[Observations, Rewards, bool, Dict] 
            + reset() -> Observations
        }

        abstract class Results {
            + objective: float
        }

        interface SettingABC {
            -- static (class) attributes --

            + {static} Results: Type[Results] 
            + {static} Observations: Type[Observations] 
            + {static} Actions: Type[Actions] 
            + {static} Rewards: Type[Rewards] 
            --
            {abstract} + apply(Method): Results
        }
        ' TODO: Here we just show the most basic interface.
        abstract class Setting extends SettingABC, pytorch_lightning.LightningDataModule {
            -- static (class) attributes --

            + {static} Results: Type[Results] 
            + {static} Observations: Type[Observations] 
            + {static} Actions: Type[Actions] 
            + {static} Rewards: Type[Rewards] 

            ' TODO: should we move this to `Setting` rather than SettingABC?
            -- inherited from LightningDataModule --
            {abstract} + prepare_data()
            {abstract} + setup()
            {abstract} + train_dataloader() -> Environment
            {abstract} + val_dataloader() -> Environment
            {abstract} + test_dataloader() -> Environment

            == Abstract Method ==
            
            {abstract} + apply(Method) -> Results
        }


    
    ' NOTE: Choose either of the following code blocks:
    ' -------------

    remove Setting
    remove pytorch_lightning
    SettingABC -.left-> Environment : creates
    SettingABC -.-> Results : produces
    SettingABC -.-> Method : applies
    SettingABC <-.- Method  : targets

    ' ----- OR -----

    ' remove SettingABC
    ' Setting -.left-> Environment : creates
    ' Setting -.-> Results : produces
    ' Setting -.-> Method : applies
    ' Setting <-.- Method  : targets

    ' -------------
    
    }

    Method <-.-> Environment : interacts with

    abstract class Method <S extends Setting> {
        ..  abstract static attributes ..

        {static} {abstract} target_setting: Type[S]

        ..  abstract (required) methods ..

        {abstract} + fit(train_env: Environment, valid_env: Environment)
        {abstract} + get_actions(observations: Observations, action_space: Space)
        
        .. optional methods ..

        + configure(setting: S)
        + on_task_switch(task_id: Optional[int])
        + test(test_env: Environment)

        ' - is_applicable(setting: SettingABC): bool
    }

    abstract class Model {
        + forward(input: Observations) -> Actions
    }
    Method -.- Model : ( can use ) 
}
remove Batch

@enduml