@startuml base

package base as settings.base {
    together {
        abstract class Observations extends Batch {
            + x: Tensor
        }
        abstract class Actions extends Batch {
            + y_pred: Tensor
        }
        abstract class Rewards extends Batch {
            + y: Tensor
        }
    }
    Environment --* Observations: yields
    Environment --* Actions: receives
    Environment --* Rewards: returns

    interface Environment extends Env, torch.DataLoader {
        + Space<Observations> observation_space
        + Space<Actions> action_space
        + Space<Rewards> reward_space
        + Tuple[Observations, Rewards, bool, Dict] step(Actions actions)
        + Observations reset()
    }

    abstract class Results {
        + objective: float
    }

    abstract class SettingABC extends LightningDataModule{
        static (class) attributes

        + {static} Results: Type[Results] 
        + {static} Observations: Type[Observations] 
        + {static} Actions: Type[Actions] 
        + {static} Rewards: Type[Rewards] 
        ..
        
        methods inherited from LightningDataModule
        
        ' TODO: should we move this to `Setting` rather than SettingABC?
        {abstract} + prepare_data()
        {abstract} + setup()
        {abstract} + train_dataloader(): Environment
        {abstract} + val_dataloader(): Environment
        {abstract} + test_dataloader(): Environment
        --
        {abstract} + apply(Method): Results
    }

    abstract class Method <S extends SettingABC> {
        ..  abstract static attributes ..

        {static} {abstract} target_setting: Type[S]

        ..  abstract (required) methods ..

        {abstract} + fit(train_env: Environment, valid_env: Environment)
        {abstract} + get_actions(observations: Observations, action_space: Space)
        
        .. optional methods ..

        + configure(setting: S)
        + on_task_switch(task_id: Optional[int])
        + test(test_env: Environment)

        ' - is_applicable(setting: SettingABC): bool
    }
    Method -> SettingABC : targets
    Method -> Environment : interacts with
    
    SettingABC -> Environment : uses
    SettingABC -> Results : produces
    SettingABC -> Method : uses


    
}

@enduml