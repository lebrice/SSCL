@startuml assumptions
!include gym.puml
remove gym.spaces

package assumptions {
    '  TODO: How to describe relationship between gym.Env and these other 
    ' assumptions about the env?
    ' abstract class Environment {

    ' }
    ' gym.Env --|> Environment

    package "assumptions about the environment" as supervision_assumptions {
        package "effect of future actions on the environment" as active_vs_passive
        {
            interface PossiblyActiveEnvironment <<Assumption>> {
                # Actions MAY influence future observations
            }
            abstract class ActiveEnvironment <<Assumption>> extends PossiblyActiveEnvironment {
                # Actions DO influence future observations
                --
                Examples:
                Playing tennis
            }
            abstract class PassiveEnvironment <<Assumption>> extends PossiblyActiveEnvironment {
                Actions DONT influence future observations
                --
                Examples:
                + Predicting what might happen next when watching a movie.
            }
            ' Environment --|> PossiblyActiveEnvironment
        }

        package "type of feedback (rewards)" as feedback_type_assumption
        {
            interface Feedback <<Assumption>> {}
            abstract class SparseFeedback <<Assumption>> extends Feedback {
                the environment only gives back the reward associated with the action taken.
                --
                Example: When you play a game, you get a reward based on how good your action was.
            }
            abstract class DenseFeedback <<Assumption>> extends SparseFeedback {
                The environment gives the reward for all possible actions at every step.
                --
                Example: Image classification: The method is told what the image was and
                what it was not. The reward (correct vs incorrect prediction) is given
                for all the potential actions!
            }
        }
    }

    package "assumptions about the context" as context_assumption_family {
        package "discrete vs continuous" as context_continuous_vs_discrete {
            abstract class ContinuousContext <<Assumption>>  {
                The context variable is continuous: c ∈ R
                Example: Varying friction with the ground in an environment.
            }
            abstract class DiscreteContext <<Assumption>>  extends ContinuousContext {
                The context variable is discrete: c ∈ N
                Example: A list of possible tasks
            }
            abstract class FixedContext <<Assumption>> extends DiscreteContext {
                The context variable is fixed to a single value
            }
        }
        package "observability" as context_observability {
            abstract class HiddenContext <<Assumption>>  {
                Methods don't have access to the context variable.
            }
            ' abstract class BoundariesObservable <<Assumption>> extends HiddenContext {
            '     Task boundaries are given during training
            ' }
            abstract class PartiallyObservableContext <<Assumption>>  extends HiddenContext {
                Methods may have access to the context variable some of the time
                Example: Have task labels during training, but not during testing.
            }
            abstract class FullyObservableContext <<Assumption>>  extends PartiallyObservableContext {
                Methods always have access to the context variable.
                i.e., during training and testing.
            }
        }
        package "non-stationarity" as context_nonstationarity_assumption {
            abstract class Continual <<Assumption>> {
                The context may change smoothly over time.
            }
            abstract class Incremental <<Assumption>> extends Continual {
                The context can change suddenly (task boundaries)
            }
            abstract class Stationary <<Assumption>> extends Incremental {
                The context is sampled uniformly
            }
        }
        package "shared vs disjoint spaces between tasks" as action_space_assumption {
            ' NOTE: We could have this for the observation and reward spaces too!
            abstract class PossiblySharedActionSpace {
                It is possible that there is an overlap in the action space between tasks. 
            }
            abstract class SharedActionSpaces extends PossiblySharedActionSpace {
                The action space remains the same in all tasks.
            }
            abstract class DisjointActionSpaces extends PossiblySharedActionSpace {
                Each task has its own (disjoint) action space. 
            }
        }
    }
}
remove assumptions
remove gym
package cl {
    class ContinuousTaskAgnosticSLSetting {
        - clear_task_boundaries: bool = False
        ' - task_labels_at_train_time: bool = False
        ' - task_labels_at_test_time: bool = False
        ' - stationary_context: bool = False
        ' - shared_action_space: bool = False
    }
    class DiscreteTaskAgnosticSLSetting extends ContinuousTaskAgnosticSLSetting {
        == New assumptions ==

        + clear_task_boundaries: Constant[bool] = True
        ' + known_task_boundaries_at_train_time: bool = False
        ' + known_task_boundaries_at_test_time: bool = False

        == Inherited assumptions ==
        ' # task_labels_at_train_time: bool = False
        ' # task_labels_at_test_time: bool = False
        ' # stationary_context: bool = False
        ' # shared_action_space: bool = False

    }
    class IncrementalSLSetting extends DiscreteTaskAgnosticSLSetting{
        == New assumptions ==

        + known_task_boundaries_at_train_time: Constant[bool] = True
        + known_task_boundaries_at_test_time: Constant[bool] = True

        == Inherited assumptions ==

        # clear_task_boundaries: Constant[bool] = True
        ' # task_labels_at_train_time: bool = False
        ' # task_labels_at_test_time: bool = False
        ' # shared_action_space: bool = False
        ' # stationary_context: bool = False
        
    }
    class ClassIncrementalSLSetting extends IncrementalSLSetting {
        == New assumptions ==
        
        + shared_action_space: Constant[bool] = False

        == Inherited assumptions ==

        # clear_task_boundaries: Constant[bool] = True
        # known_task_boundaries_at_train_time: Constant[bool] = True
        # known_task_boundaries_at_test_time: Constant[bool] = True
        ' # task_labels_at_train_time: bool = False
        ' # task_labels_at_test_time: bool = False
        ' # stationary_context: bool = False
    }
    class DomainIncrementalSLSetting extends IncrementalSLSetting {
        == New assumptions ==

        + shared_action_space: Constant[bool] = True

        == Inherited assumptions ==

        # clear_task_boundaries: Constant[bool] = True
        # known_task_boundaries_at_train_time: Constant[bool] = True
        # known_task_boundaries_at_test_time: Constant[bool] = True
    }

    class TaskIncrementalSLSetting extends IncrementalSLSetting {
        == New assumptions ==

        + task_labels_at_train_time: Constant[bool] = True
        + task_labels_at_test_time: Constant[bool] = True
        
        == Inherited assumptions ==

        # clear_task_boundaries: Constant[bool] = True
        # known_task_boundaries_at_train_time: Constant[bool] = True
        # known_task_boundaries_at_test_time: Constant[bool] = True
    }

    class TraditionalSLSetting extends IncrementalSLSetting {
        == New assumptions ==

        + stationary_context: Constant[bool] = True

        == Inherited assumptions ==

        # clear_task_boundaries: Constant[bool] = True
    }
    
    class MultiTaskSLSetting extends TaskIncrementalSLSetting, TraditionalSLSetting {
        == New assumptions ==

        + stationary_context: Context[bool] = True
        
        == Inherited assumptions ==

        # task_labels_at_train_time: Constant[bool] = True
        # task_labels_at_test_time: Constant[bool] = True
        # clear_task_boundaries: Constant[bool] = True
        # known_task_boundaries_at_train_time: Constant[bool] = True
        # known_task_boundaries_at_test_time: Constant[bool] = True
    }

    remove ClassIncrementalSLSetting
    remove DomainIncrementalSLSetting
}



@enduml