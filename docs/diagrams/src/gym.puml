@startuml gym

package gym {
    package spaces as gym.spaces {
        abstract class Space<T> {
            + contains(T sample) -> bool
            + sample() -> T
        }
        class Box extends Space {
            + low: np.ndarray
            + high: np.ndarray
            + shape: Tuple[int, ...]
            + dtype: np.dtype
            + contains(np.ndarray sample) -> bool
            + sample() -> np.ndarray
        }

        class Discrete extends Space {
            + n: int
            + contains(int sample) -> bool
            + sample() -> int
        }

        class Tuple extends Space {
            + spaces: Tuple[Space]
            + contains(Tuple sample) -> bool
            + sample() -> Tuple
        }
        ' Tuple spaces contain other spaces.
        Tuple *--  Space

        class Dict extends Space {
            + spaces: dict[str, Space]
            + contains(dict sample) -> bool
            + sample() -> dict
        }
        ' Same for Dicts.
        Dict *--  Space
    }

    abstract class gym.Env<Obs, Act, Rew> {
        + observation_space: Space<Obs>
        + action_space: Space<Act> 
        + step(Actions) -> Tuple[Obs, Rew, bool, dict]
        + reset() -> Obs
    }
    gym.Env .. Space

    abstract class Wrapper extends gym.Env{
        + env: gym.Env
    }
}

@enduml