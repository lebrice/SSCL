from typing import Callable, List, Optional, Tuple

import gym
import pytest

from common.config import Config
from common.transforms import ChannelsFirstIfNeeded, ToTensor, Transforms
from conftest import xfail_param
from utils.utils import take

from .continual_rl_setting import ContinualRLSetting

def test_basic(config: Config):
    setting = ContinualRLSetting(observe_state_directly=False)
    batch_size = 4
    env = setting.train_dataloader(batch_size=batch_size)
    
    for observations in take(env, 5):
        assert isinstance(observations, ContinualRLSetting.Observations)
        assert observations.shapes == ((4, 400, 1200, 3), (4))
        actions = env.action_space.sample()
        rewards = env.send(actions)
        break
    else:
        assert False, f"Couldn't even iterate on the env!"
        
        



@pytest.mark.parametrize("batch_size", [1, 3])
@pytest.mark.parametrize(
    "dataset, expected_obs_shape", [
        ("cartpole",  (4,)),
    ],
)
def test_observe_state_directly(dataset: str,
                                expected_obs_shape: Tuple[int, ...],
                                batch_size: int):
    setting = ContinualRLSetting(dataset=dataset, observe_state_directly=True)
    assert setting.obs_shape == expected_obs_shape
    
    expected_obs_batch_shape = (batch_size, *expected_obs_shape)

    # Test the shapes of the obs generated by the train/val/test dataloaders.
    dataloader_methods = [
        setting.train_dataloader,
        setting.val_dataloader,
        setting.test_dataloader
    ]
    for dataloader_method in dataloader_methods:
        dataloader = dataloader_method(batch_size=batch_size)
        reset_obs = dataloader.reset()
        assert reset_obs.shape == expected_obs_batch_shape
        step_obs, *_ = dataloader.step(dataloader.random_actions())
        assert step_obs.shape == expected_obs_batch_shape
        for iter_obs, *_ in take(dataloader, 3):
            assert iter_obs.shape == expected_obs_batch_shape 
            reward = dataloader.send(dataloader.random_actions())


@pytest.mark.xfail(reason=f"TODO: DQN model only accepts string environment names...")
def test_dqn_on_env():
    """ TODO: Would be nice if we could have the models work directly on the
    gym envs..
    """
    from pl_bolts.models.rl import DQN
    from pytorch_lightning import Trainer
    setting = ContinualRLSetting(observe_state_directly=False)
    env = setting.train_dataloader(batch_size=5)
    model = DQN("PongNoFrameskip-v4")
    trainer = Trainer(fast_dev_run=True)
    trainer.fit(model)
    assert False
